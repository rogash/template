name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.4
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, pdo_sqlite, gd, curl, zip, bcmath, soap, redis, memcached
        tools: composer:v2, phpstan, psalm
        coverage: xdebug

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Copy .env
      run: cp env.example .env

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction

    - name: Install NPM dependencies
      run: npm ci

    - name: Generate app key
      run: php artisan key:generate

    - name: Directory permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS laravel_test;"

    - name: Execute migrations
      run: php artisan migrate --force

    - name: Execute seeders
      run: php artisan db:seed --force

    - name: Run tests
      run: php artisan test --coverage

    - name: Run PHPStan
      run: phpstan analyse --memory-limit=2G

    - name: Run Psalm
      run: psalm --no-progress

    - name: Run Laravel Pint
      run: ./vendor/bin/pint --test

    - name: Run PHP CS Fixer
      run: ./vendor/bin/phpcs --standard=PSR12 app/

    - name: Build assets
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP 8.4
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.4'
        tools: composer:v2

    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction

    - name: Run security audit
      run: composer audit

    - name: Run PHP Security Checker
      run: |
        curl -sSfL https://github.com/fabpot/local-php-security-checker/releases/latest/download/local-php-security-checker_linux_amd64 -o security-checker
        chmod +x security-checker
        ./security-checker composer.lock

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Deploy to production
      run: echo "Deploy to production would happen here"
      # Add your deployment logic here

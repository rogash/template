# üöÄ Cursor Rules - Template Laravel 12

## üìã Vis√£o Geral
Este arquivo define as regras e melhores pr√°ticas para desenvolvimento com este template Laravel 12, incluindo padr√µes de c√≥digo, estrutura de arquivos e ferramentas de qualidade.

## üèóÔ∏è Estrutura do Projeto

### Diret√≥rios Principais
- `app/` - C√≥digo da aplica√ß√£o Laravel
- `config/` - Arquivos de configura√ß√£o
- `database/` - Migra√ß√µes, seeders, factories
- `routes/` - Defini√ß√£o de rotas
- `storage/` - Arquivos gerados pela aplica√ß√£o
- `tests/` - Testes automatizados
- `resources/` - Views, assets, linguagens
- `public/` - Arquivos p√∫blicos

### Padr√µes de Nomenclatura
- **Controllers**: `UserController`, `PostController` (sufixo Controller)
- **Models**: `User`, `Post`, `Comment` (singular, PascalCase)
- **Services**: `UserService`, `EmailService` (sufixo Service)
- **Repositories**: `UserRepository`, `PostRepository` (sufixo Repository)
- **Requests**: `UserRequest`, `PostRequest` (sufixo Request)
- **Resources**: `UserResource`, `PostResource` (sufixo Resource)

## üìù Padr√µes de C√≥digo

### PHP (Laravel)
- **Padr√£o**: PSR-12 estritamente
- **Indenta√ß√£o**: 4 espa√ßos
- **Chaves**: Na mesma linha para classes e m√©todos
- **Tipagem**: Sempre usar type hints e return types
- **Propriedades**: Usar `readonly` quando poss√≠vel
- **Construtor**: Usar constructor property promotion

### Exemplo de Controller
```php
<?php

namespace App\Http\Controllers;

use App\Http\Requests\UserRequest;
use App\Models\User;
use App\Services\UserService;
use Illuminate\Http\JsonResponse;

class UserController extends Controller
{
    public function __construct(
        private readonly UserService $userService
    ) {}

    public function index(): JsonResponse
    {
        $users = $this->userService->getAllUsers();

        return response()->json($users);
    }

    public function store(UserRequest $request): JsonResponse
    {
        $user = $this->userService->createUser($request->validated());

        return response()->json($user, 201);
    }
}
```

### Exemplo de Service
```php
<?php

namespace App\Services;

use App\Models\User;
use App\Repositories\UserRepository;
use Illuminate\Support\Facades\Hash;

class UserService
{
    public function __construct(
        private readonly UserRepository $userRepository
    ) {}

    public function createUser(array $data): User
    {
        $data['password'] = Hash::make($data['password']);

        return $this->userRepository->create($data);
    }
}
```

### Exemplo de Model
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class User extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    protected $hidden = [
        'password',
        'remember_token',
    ];

    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    public function posts(): HasMany
    {
        return $this->hasMany(Post::class);
    }
}
```

## üîç Ferramentas de Qualidade

### An√°lise Est√°tica
- **PHPStan**: Level 8 (m√°ximo rigor) - **PRINCIPAL FERRAMENTA**
- **Psalm**: Error Level 4 (rigoroso) - **FERRAMENTA COMPLEMENTAR**
- **Laravel Pint**: Formata√ß√£o autom√°tica
- **PHP CS Fixer**: PSR-12 compliance

### Comandos de Qualidade
```bash
# Verifica√ß√£o completa
make quality

# An√°lise est√°tica
make stan          # PHPStan
make psalm         # Psalm

# Formata√ß√£o
make pint          # Laravel Pint
make cs-check      # Verificar PSR-12
make cs-fix        # Corrigir PSR-12
```

## üß™ Testes

### Estrutura de Testes
- **Feature Tests**: `tests/Feature/` - Testes de funcionalidade
- **Unit Tests**: `tests/Unit/` - Testes unit√°rios
- **Database**: Usar `RefreshDatabase` trait
- **Factories**: Criar factories para todos os models

### Exemplo de Teste
```php
<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class UserTest extends TestCase
{
    use RefreshDatabase;

    public function test_can_create_user(): void
    {
        $userData = [
            'name' => 'John Doe',
            'email' => 'john@example.com',
            'password' => 'password123',
        ];

        $response = $this->postJson('/api/users', $userData);

        $response->assertStatus(201)
                ->assertJsonStructure([
                    'id',
                    'name',
                    'email',
                    'created_at',
                ]);

        $this->assertDatabaseHas('users', [
            'email' => 'john@example.com',
        ]);
    }
}
```

## üê≥ Docker e Ambiente

### Laravel Sail
- **Comando**: `./vendor/bin/sail`
- **Alias**: `make sail-up`, `make sail-down`
- **Portas**: 80 (Laravel), 3306 (MySQL), 6379 (Redis)

### Servi√ßos Dispon√≠veis
- Laravel: http://localhost
- MySQL: localhost:3306
- Redis: localhost:6379
- Meilisearch: http://localhost:7700
- Mailpit: http://localhost:8025

## üöÄ Desenvolvimento

### Workflow Recomendado
1. **Setup**: `./scripts/setup.sh`
2. **Desenvolvimento**: `make sail-up` + `make watch`
3. **Antes do Commit**: `make quality`
4. **Testes**: `make test`

### Comandos Essenciais
```bash
# Setup inicial
./scripts/setup.sh

# Desenvolvimento
make sail-up          # Iniciar Docker
make watch            # Hot reload
make quality          # Verificar qualidade

# Testes
make test             # Executar testes
make test-coverage    # Com cobertura

# Deploy
make optimize         # Otimizar para produ√ß√£o
make build            # Compilar assets
```

## üìö Recursos e Documenta√ß√£o

### Links √öteis
- [Laravel 12 Documentation](https://laravel.com/docs)
- [PHPStan Documentation](https://phpstan.org/)
- [Psalm Documentation](https://psalm.dev/)
- [Laravel Pint](https://laravel.com/docs/pint)
- [Laravel Sail](https://laravel.com/docs/sail)

### Arquivos de Configura√ß√£o
- `composer.json` - Depend√™ncias PHP
- `package.json` - Depend√™ncias Node.js
- `phpstan.neon` - Configura√ß√£o PHPStan
- `psalm.xml` - Configura√ß√£o Psalm
- `pint.json` - Configura√ß√£o Laravel Pint
- `phpcs.xml` - Configura√ß√£o PSR-12
- `.eslintrc.js` - Configura√ß√£o ESLint
- `tsconfig.json` - Configura√ß√£o TypeScript

## ‚ö†Ô∏è Regras Importantes

### ‚ùå N√ÉO FAZER
- N√£o commitar arquivos `.env`
- N√£o commitar `vendor/` ou `node_modules/`
- N√£o usar `DB::raw()` sem sanitiza√ß√£o
- N√£o deixar queries N+1
- N√£o commitar c√≥digo n√£o formatado
- **N√ÉO COMMITAR AUTOMATICAMENTE** - Sempre revisar antes
- **N√ÉO FAZER PUSH AUTOMATICAMENTE** - Sempre verificar qualidade primeiro

### ‚úÖ SEMPRE FAZER
- Executar `make quality` antes do commit
- Usar type hints e return types
- Seguir PSR-12 estritamente
- Escrever testes para novas funcionalidades
- Documentar m√©todos complexos
- Usar dependency injection
- **REVISAR C√ìDIGO** antes de commitar
- **EXECUTAR TESTES** antes de fazer push
- **VERIFICAR QUALIDADE** com ferramentas configuradas

### üîß Boas Pr√°ticas
- **SOLID Principles**: Aplicar sempre que poss√≠vel
- **Repository Pattern**: Para acesso a dados
- **Service Layer**: Para l√≥gica de neg√≥cio
- **Form Requests**: Para valida√ß√£o
- **API Resources**: Para transforma√ß√£o de dados
- **Events & Listeners**: Para a√ß√µes ass√≠ncronas
- **Jobs & Queues**: Para tarefas pesadas

## üö´ Controle de Vers√£o - REGRAS CR√çTICAS

### ‚ö†Ô∏è NUNCA AUTOMATIZAR
- **Commits autom√°ticos** s√£o PROIBIDOS
- **Push autom√°tico** √© PROIBIDO
- **Deploy autom√°tico** sem revis√£o √© PROIBIDO

### üîí Processo Obrigat√≥rio
1. **Desenvolver** funcionalidade
2. **Executar** `make quality` para verificar qualidade
3. **Executar** `make test` para verificar testes
4. **Revisar** c√≥digo manualmente
5. **Commitar** com mensagem descritiva
6. **Fazer push** apenas ap√≥s revis√£o completa

### üåç Idioma dos Commits
- **OBRIGAT√ìRIO**: Todos os commits devem ser em **PORTUGU√äS BRASILEIRO (pt-BR)**
- **N√ÉO USAR**: Ingl√™s, espanhol ou outros idiomas
- **PADR√ÉO**: Usar verbos no infinitivo e linguagem t√©cnica em portugu√™s

### üìù Mensagens de Commit
```bash
# Formato correto (pt-BR)
git commit -m "feat: adiciona autentica√ß√£o de usu√°rios

- Implementa sistema de login/logout
- Adiciona middleware de autentica√ß√£o
- Cria testes para funcionalidades
- Atualiza documenta√ß√£o"

# Formato incorreto (ingl√™s)
git commit -m "feat: add user authentication"  # ‚ùå N√ÉO USAR INGL√äS

# Formato incorreto (vago)
git commit -m "fix"  # ‚ùå Muito vago
git commit -m "updates"  # ‚ùå N√£o descritivo
```

### üìö Exemplos de Commits em Portugu√™s
```bash
# Funcionalidades
git commit -m "feat: implementa sistema de notifica√ß√µes por email"
git commit -m "feat: adiciona dashboard administrativo"
git commit -m "feat: cria API para gerenciamento de produtos"

# Corre√ß√µes
git commit -m "fix: corrige valida√ß√£o de CPF no formul√°rio"
git commit -m "fix: resolve problema de cache no Redis"
git commit -m "fix: ajusta timezone para hor√°rio de Bras√≠lia"

# Melhorias
git commit -m "perf: otimiza consultas do banco de dados"
git commit -m "refactor: reorganiza estrutura de diret√≥rios"
git commit -m "style: aplica formata√ß√£o PSR-12"

# Documenta√ß√£o
git commit -m "docs: atualiza README com instru√ß√µes de instala√ß√£o"
git commit -m "docs: adiciona coment√°rios no c√≥digo"
git commit -m "docs: cria guia de deploy para produ√ß√£o"
```

## üéØ Dicas de Produtividade

### IDE Setup
- **PHPStorm**: Laravel Plugin + PHPStan
- **VS Code**: PHP Intelephense + Laravel Snippets
- **Vim/Neovim**: ALE + PHPStan

### Extens√µes Recomendadas
- PHP Intelephense
- Laravel Blade Snippets
- PHP Debug
- PHP CS Fixer
- Tailwind CSS IntelliSense

### Atalhos √öteis
- `make help` - Ver todos os comandos
- `make quality` - Verifica√ß√£o completa
- `make fresh` - Recriar banco
- `make cache-clear` - Limpar caches

---

**üéâ Lembre-se: Qualidade de c√≥digo √© prioridade! Sempre execute `make quality` antes de commitar.**

**üö´ IMPORTANTE: NUNCA commite ou fa√ßa push automaticamente. Sempre revise e verifique a qualidade do c√≥digo primeiro!**

**üáßüá∑ OBRIGAT√ìRIO: Todos os commits devem ser em PORTUGU√äS BRASILEIRO (pt-BR)!**
